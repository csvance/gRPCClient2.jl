# Autogenerated using ProtoBuf.jl v1.2.0 on 2025-10-15T14:44:30.726
# original file: /home/cvance/Git/gRPCClient2/test/proto/test.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export TestResponse, TestRequest


struct TestResponse
    data::Vector{UInt64}
end
PB.default_values(::Type{TestResponse}) = (;data = Vector{UInt64}())
PB.field_numbers(::Type{TestResponse}) = (;data = 1)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:TestResponse})
    data = PB.BufferedVector{UInt64}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, wire_type, data)
        else
            Base.skip(d, wire_type)
        end
    end
    return TestResponse(data[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::TestResponse)
    initpos = position(e.io)
    !isempty(x.data) && PB.encode(e, 1, x.data)
    return position(e.io) - initpos
end
function PB._encoded_size(x::TestResponse)
    encoded_size = 0
    !isempty(x.data) && (encoded_size += PB._encoded_size(x.data, 1))
    return encoded_size
end

struct TestRequest
    test_response_sz::UInt64
    data::Vector{UInt64}
end
PB.default_values(::Type{TestRequest}) = (;test_response_sz = zero(UInt64), data = Vector{UInt64}())
PB.field_numbers(::Type{TestRequest}) = (;test_response_sz = 1, data = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:TestRequest})
    test_response_sz = zero(UInt64)
    data = PB.BufferedVector{UInt64}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            test_response_sz = PB.decode(d, UInt64)
        elseif field_number == 2
            PB.decode!(d, wire_type, data)
        else
            Base.skip(d, wire_type)
        end
    end
    return TestRequest(test_response_sz, data[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::TestRequest)
    initpos = position(e.io)
    x.test_response_sz != zero(UInt64) && PB.encode(e, 1, x.test_response_sz)
    !isempty(x.data) && PB.encode(e, 2, x.data)
    return position(e.io) - initpos
end
function PB._encoded_size(x::TestRequest)
    encoded_size = 0
    x.test_response_sz != zero(UInt64) && (encoded_size += PB._encoded_size(x.test_response_sz, 1))
    !isempty(x.data) && (encoded_size += PB._encoded_size(x.data, 2))
    return encoded_size
end

TestService_TestRPC_Client(host, port; secure=false, grpc=grpc_global_handle(), deadline=10, keepalive=60) = gRPCClient{TestRequest, TestResponse}(host, port, "/test.TestService/TestRPC"; grpc=grpc, secure=secure, deadline=deadline, keepalive=keepalive)
